#!/usr/bin/env ruby
# coding: utf-8

require 'metadata/certificate/certificate_factory'
require 'metadata/checker'
require 'metadata/expiry/certificate_result'
require 'metadata/ocsp/pem_checker'
require 'metadata/saml/parser'
require 'metadata/saml/client'
require 'mixlib/cli'
require 'prometheus/middleware/exporter'
require 'sinatra/base'

class ValidUntilMetric < Prometheus::Client::Gauge
  def initialize(metadata_url)
    super(:verify_metadata_expiry, "The validUntil date of the given metadata")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
  end
  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    valid_until = @parser.valid_until(document)

    gauge.set({ metadata: @metadata_url }, valid_until)

    # return the metrics to prometheus
    return gauge.values
  end
end

class ExpiryDateMetric < Prometheus::Client::Gauge
  def initialize(metadata_url)
    super(:verify_metadata_certificate_expiry, "The NotAfter date of the given X.509 SAML certificate")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
    @certificate_factory = Metadata::Certificate::CertificateFactory.new
  end
  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    # these are all the certs served from the metadata
    check_and_set(gauge, @parser.certificate_identities(document))

    # this is the cert used to sign the metadata document itself
    signing_cert = @parser.signing_certificate(document)
    check_and_set(gauge, signing_cert) unless signing_cert.nil?

    # return the metrics to prometheus
    return gauge.values
  end

  private

  def check_and_set(gauge, certificate_identities)
    certificate_identities.each do | pem, entity |
      cert = @certificate_factory.from_inline_pem(pem)
      # grafana prefers timestamps to be in milliseconds :(
      not_on_or_after = cert.not_after.to_time.to_f * 1000
      entity.each do |e|
        gauge.set({     entity_id: e[:entity_id],
                        use: e[:key_use],
                        serial: cert.serial,
                        subject: cert.subject,
                  }, not_on_or_after)
      end
    end
  end

end

# ocsp - same as ExpiryDateMetric but 0 (fail) or 1 (pass)
class OcspCheckMetric < Prometheus::Client::Gauge
  def initialize(metadata_url, ca_files, allow_self_signed)
    super(:verify_metadata_certificate_ocsp_success, "If a cert chain validation and OCSP check of the given X.509 SAML certificate is good (1) or bad (0)")
    @metadata_url = metadata_url
    @ca_files = ca_files
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
    @certificate_factory = Metadata::Certificate::CertificateFactory.new
    @pem_checker = Metadata::Ocsp::PemChecker.new
    @allow_self_signed = allow_self_signed
  end
  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    # these are all the certs served from the metadata
    check_and_set(gauge, @parser.certificate_identities(document), @ca_files, @allow_self_signed)

    # this is the cert used to sign the metadata document itself
    check_and_set(gauge, @parser.signing_certificate(document), @ca_files)

    # return the metrics to prometheus
    return gauge.values
  end

  private

  def check_and_set(gauge, certificate_identities, ca_files, allow_self_signed = false)
      return if certificate_identities.nil?

      pems = certificate_identities.keys
      ocsp_results = @pem_checker.check_pems(pems, ca_files, allow_self_signed)
      certificate_identities.map do |pem, identities|
        identities.map do |identity|
          cert = @certificate_factory.from_inline_pem(pem)
          ocsp_result = ocsp_results[pem].revoked? ? 0 : 1

          unless ocsp_results[pem].unknown?
            gauge.set({    entity_id: identity.entity_id,
                           use: identity.key_use,
                           serial: cert.serial,
                           subject: cert.subject,
                      }, ocsp_result)
          end
        end
      end
  end
end

class PrometheusMetadataExporter
  include Mixlib::CLI

  option :port, :short => '-p PORT', required: false, default: 9199, description: "Port to listen on (default 9199)"
  option :metadata_url, :short => '-m METADATA_URL', required: true, description: "URL to fetch metadata from"
  option :ca_file_list, :long => '--cas DIR', required: true, description: "Directory containing CA certificate files in PEM format"
  option :allow_self_signed, :long => '--allow_self_signed', required: false, boolean: true, description: "Set true to skip OCSP checks for self signed certificates."

  def gogogo
    allow_self_signed = config[:allow_self_signed]
    dir = config[:ca_file_list]
    ca_file_list = Dir.children(dir).collect{|name| File.join(dir,name)}

    Prometheus::Client::registry.register(ExpiryDateMetric.new(config[:metadata_url]))
    Prometheus::Client::registry.register(ValidUntilMetric.new(config[:metadata_url]))
    Prometheus::Client::registry.register(OcspCheckMetric.new(config[:metadata_url], ca_file_list, allow_self_signed))
  end
end

class App < Sinatra::Base
  use Prometheus::Middleware::Exporter

  exporter = PrometheusMetadataExporter.new
  exporter.parse_options

  set :port, exporter.config[:port]
  set :bind, '0.0.0.0'
  set :show_exceptions, false

  exporter.gogogo
  run!
end


